// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Update.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Cardsy.Data.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        private ApplicationDbContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("c5355990-4083-4a66-b9d3-708175ce0bf5"), entityTypeCount: 1)
        {
        }

        partial void Initialize()
        {
            var concentrationGame = ConcentrationGameEntityType.Create(this);

            ConcentrationGameEntityType.CreateAnnotations(concentrationGame);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "9.0.1");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModelFactory", () => CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var concentrationGame = FindEntityType("Cardsy.Data.Games.Concentration.ConcentrationGame")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            concentrationGame.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var cardsyDataGamesConcentrationConcentrationGameTableBase = new TableBase("Cardsy.Data.Games.Concentration.ConcentrationGame", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "bigint", cardsyDataGamesConcentrationConcentrationGameTableBase);
            cardsyDataGamesConcentrationConcentrationGameTableBase.Columns.Add("Id", idColumnBase);
            var sizeColumnBase = new ColumnBase<ColumnMappingBase>("Size", "integer", cardsyDataGamesConcentrationConcentrationGameTableBase);
            cardsyDataGamesConcentrationConcentrationGameTableBase.Columns.Add("Size", sizeColumnBase);
            var solutionColumnBase = new ColumnBase<ColumnMappingBase>("Solution", "integer[]", cardsyDataGamesConcentrationConcentrationGameTableBase);
            cardsyDataGamesConcentrationConcentrationGameTableBase.Columns.Add("Solution", solutionColumnBase);
            relationalModel.DefaultTables.Add("Cardsy.Data.Games.Concentration.ConcentrationGame", cardsyDataGamesConcentrationConcentrationGameTableBase);
            var cardsyDataGamesConcentrationConcentrationGameMappingBase = new TableMappingBase<ColumnMappingBase>(concentrationGame, cardsyDataGamesConcentrationConcentrationGameTableBase, null);
            cardsyDataGamesConcentrationConcentrationGameTableBase.AddTypeMapping(cardsyDataGamesConcentrationConcentrationGameMappingBase, false);
            defaultTableMappings.Add(cardsyDataGamesConcentrationConcentrationGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, concentrationGame.FindProperty("Id")!, cardsyDataGamesConcentrationConcentrationGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sizeColumnBase, concentrationGame.FindProperty("Size")!, cardsyDataGamesConcentrationConcentrationGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)solutionColumnBase, concentrationGame.FindProperty("Solution")!, cardsyDataGamesConcentrationConcentrationGameMappingBase);

            var tableMappings = new List<TableMapping>();
            concentrationGame.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var concentrationTable = new Table("Concentration", null, relationalModel);
            var idColumn = new Column("Id", "bigint", concentrationTable);
            concentrationTable.Columns.Add("Id", idColumn);
            idColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<long>(idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var sizeColumn = new Column("Size", "integer", concentrationTable);
            concentrationTable.Columns.Add("Size", sizeColumn);
            sizeColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(sizeColumn);
            var solutionColumn = new Column("Solution", "integer[]", concentrationTable);
            concentrationTable.Columns.Add("Solution", solutionColumn);
            solutionColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<int[]>(solutionColumn);
            relationalModel.Tables.Add(("Concentration", null), concentrationTable);
            var concentrationTableMapping = new TableMapping(concentrationGame, concentrationTable, null);
            concentrationTable.AddTypeMapping(concentrationTableMapping, false);
            tableMappings.Add(concentrationTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, concentrationGame.FindProperty("Id")!, concentrationTableMapping);
            RelationalModel.CreateColumnMapping(sizeColumn, concentrationGame.FindProperty("Size")!, concentrationTableMapping);
            RelationalModel.CreateColumnMapping(solutionColumn, concentrationGame.FindProperty("Solution")!, concentrationTableMapping);
            var pK_Concentration = new UniqueConstraint("PK_Concentration", concentrationTable, new[] { idColumn });
            concentrationTable.PrimaryKey = pK_Concentration;
            pK_Concentration.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<long>(pK_Concentration));
            var pK_ConcentrationKey = RelationalModel.GetKey(this,
                "Cardsy.Data.Games.Concentration.ConcentrationGame",
                new[] { "Id" });
            pK_Concentration.MappedKeys.Add(pK_ConcentrationKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ConcentrationKey).Add(pK_Concentration);
            concentrationTable.UniqueConstraints.Add("PK_Concentration", pK_Concentration);
            return relationalModel.MakeReadOnly();
        }
    }
}
