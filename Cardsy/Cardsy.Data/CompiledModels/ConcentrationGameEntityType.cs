// <auto-generated />
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Cardsy.Data.Games.Concentration;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Cardsy.Data.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ConcentrationGameEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Cardsy.Data.Games.Concentration.ConcentrationGame",
                typeof(ConcentrationGame),
                baseEntityType,
                propertyCount: 3,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(ConcentrationGame).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConcentrationGame).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.SetGetter(
                long (ConcentrationGame entity) => ConcentrationGameUnsafeAccessors.Id(entity),
                bool (ConcentrationGame entity) => ConcentrationGameUnsafeAccessors.Id(entity) == 0L,
                long (ConcentrationGame instance) => ConcentrationGameUnsafeAccessors.Id(instance),
                bool (ConcentrationGame instance) => ConcentrationGameUnsafeAccessors.Id(instance) == 0L);
            id.SetSetter(
                (ConcentrationGame entity, long value) => ConcentrationGameUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (ConcentrationGame entity, long value) => ConcentrationGameUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                long (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<long>(0) : (entry.FlaggedAsTemporary(0) && ConcentrationGameUnsafeAccessors.Id(((ConcentrationGame)(entry.Entity))) == 0L ? entry.ReadTemporaryValue<long>(0) : ConcentrationGameUnsafeAccessors.Id(((ConcentrationGame)(entry.Entity))))),
                long (InternalEntityEntry entry) => ConcentrationGameUnsafeAccessors.Id(((ConcentrationGame)(entry.Entity))),
                long (InternalEntityEntry entry) => entry.ReadOriginalValue<long>(id, 0),
                long (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<long>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                keyComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<long>(id));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            var size = runtimeEntityType.AddProperty(
                "Size",
                typeof(BoardSize),
                propertyInfo: typeof(ConcentrationGame).GetProperty("Size", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConcentrationGame).GetField("<Size>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            size.SetGetter(
                BoardSize (ConcentrationGame entity) => ConcentrationGameUnsafeAccessors.Size(entity),
                bool (ConcentrationGame entity) => object.Equals(((object)(ConcentrationGameUnsafeAccessors.Size(entity))), ((object)(BoardSize._2x2))),
                BoardSize (ConcentrationGame instance) => ConcentrationGameUnsafeAccessors.Size(instance),
                bool (ConcentrationGame instance) => object.Equals(((object)(ConcentrationGameUnsafeAccessors.Size(instance))), ((object)(BoardSize._2x2))));
            size.SetSetter(
                (ConcentrationGame entity, BoardSize value) => ConcentrationGameUnsafeAccessors.Size(entity) = value);
            size.SetMaterializationSetter(
                (ConcentrationGame entity, BoardSize value) => ConcentrationGameUnsafeAccessors.Size(entity) = value);
            size.SetAccessors(
                BoardSize (InternalEntityEntry entry) => ConcentrationGameUnsafeAccessors.Size(((ConcentrationGame)(entry.Entity))),
                BoardSize (InternalEntityEntry entry) => ConcentrationGameUnsafeAccessors.Size(((ConcentrationGame)(entry.Entity))),
                BoardSize (InternalEntityEntry entry) => entry.ReadOriginalValue<BoardSize>(size, 1),
                BoardSize (InternalEntityEntry entry) => entry.GetCurrentValue<BoardSize>(size),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            size.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            size.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<BoardSize>(
                    bool (BoardSize v1, BoardSize v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (BoardSize v) => ((object)v).GetHashCode(),
                    BoardSize (BoardSize v) => v),
                keyComparer: new ValueComparer<BoardSize>(
                    bool (BoardSize v1, BoardSize v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (BoardSize v) => ((object)v).GetHashCode(),
                    BoardSize (BoardSize v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "integer"),
                converter: new ValueConverter<BoardSize, int>(
                    int (BoardSize value) => ((int)(value)),
                    BoardSize (int value) => ((BoardSize)(value))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<BoardSize, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<BoardSize, int>(
                        int (BoardSize value) => ((int)(value)),
                        BoardSize (int value) => ((BoardSize)(value)))));
            size.SetSentinelFromProviderValue(0);
            size.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var solution = runtimeEntityType.AddProperty(
                "Solution",
                typeof(int[]),
                propertyInfo: typeof(ConcentrationGame).GetProperty("Solution", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConcentrationGame).GetField("<Solution>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            solution.SetGetter(
                int[] (ConcentrationGame entity) => ConcentrationGameUnsafeAccessors.Solution(entity),
                bool (ConcentrationGame entity) => ConcentrationGameUnsafeAccessors.Solution(entity) == null,
                int[] (ConcentrationGame instance) => ConcentrationGameUnsafeAccessors.Solution(instance),
                bool (ConcentrationGame instance) => ConcentrationGameUnsafeAccessors.Solution(instance) == null);
            solution.SetSetter(
                (ConcentrationGame entity, int[] value) => ConcentrationGameUnsafeAccessors.Solution(entity) = value);
            solution.SetMaterializationSetter(
                (ConcentrationGame entity, int[] value) => ConcentrationGameUnsafeAccessors.Solution(entity) = value);
            solution.SetAccessors(
                int[] (InternalEntityEntry entry) => ConcentrationGameUnsafeAccessors.Solution(((ConcentrationGame)(entry.Entity))),
                int[] (InternalEntityEntry entry) => ConcentrationGameUnsafeAccessors.Solution(((ConcentrationGame)(entry.Entity))),
                int[] (InternalEntityEntry entry) => entry.ReadOriginalValue<int[]>(solution, 2),
                int[] (InternalEntityEntry entry) => entry.GetCurrentValue<int[]>(solution),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            solution.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            solution.TypeMapping = NpgsqlArrayTypeMapping<int[], int[], int>.Default.Clone(
                comparer: new ListOfValueTypesComparer<int[], int>(new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v)),
                keyComparer: new ValueComparer<int[]>(
                    bool (int[] v1, int[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals(((object)(v1)), ((object)(v2))),
                    int (int[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode(((object)(v))),
                    int[] (int[] source) => source.ToArray()),
                providerValueComparer: new ValueComparer<int[]>(
                    bool (int[] v1, int[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals(((object)(v1)), ((object)(v2))),
                    int (int[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode(((object)(v))),
                    int[] (int[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "integer[]"),
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<int[], int>(
                    JsonInt32ReaderWriter.Instance),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<int>(
                        bool (int v1, int v2) => v1 == v2,
                        int (int v) => v,
                        int (int v) => v),
                    keyComparer: new ValueComparer<int>(
                        bool (int v1, int v2) => v1 == v2,
                        int (int v) => v,
                        int (int v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        bool (int v1, int v2) => v1 == v2,
                        int (int v) => v,
                        int (int v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "integer")));
            solution.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var size = runtimeEntityType.FindProperty("Size");
            var solution = runtimeEntityType.FindProperty("Solution");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<long>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<long>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((ConcentrationGame)(source.Entity));
                    return ((ISnapshot)(new Snapshot<long, BoardSize, int[]>(((ValueComparer<long>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<long>(id)), ((ValueComparer<BoardSize>)(((IProperty)size).GetValueComparer())).Snapshot(source.GetCurrentValue<BoardSize>(size)), (((IEnumerable<int>)(source.GetCurrentValue<int[]>(solution))) == null ? null : ((int[])(((ValueComparer<IEnumerable<int>>)(((IProperty)solution).GetValueComparer())).Snapshot(((IEnumerable<int>)(source.GetCurrentValue<int[]>(solution))))))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<long>(((ValueComparer<long>)(((IProperty)id).GetValueComparer())).Snapshot(default(long))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<long>(default(long)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((ConcentrationGame)(source.Entity));
                    return ((ISnapshot)(new Snapshot<long>(((ValueComparer<long>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<long>(id)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 3,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 3,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 1);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Concentration");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
